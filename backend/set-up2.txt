0) Install & base setup
pip install djangorestframework djangorestframework-simplejwt django-cors-headers

settings.py
INSTALLED_APPS += [
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
]

MIDDLEWARE = ["corsheaders.middleware.CorsMiddleware", *MIDDLEWARE]
CORS_ALLOW_ALL_ORIGINS = True  # or set a whitelist

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.AllowAny",  # default; we’ll set per-view
    ),
}

project/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("admin/", admin.site.urls),
    path("api/", include("api.urls")),   # <- your app
]


1) api/serializers.py
from django.contrib.auth import get_user_model
from rest_framework import serializers
from django.contrib.auth.password_validation import validate_password

User = get_user_model()

class RegisterSerializer(serializers.ModelSerializer):
    # write_only so it never comes back in responses
    password = serializers.CharField(write_only=True, min_length=8)

    class Meta:
        model = User
        fields = ["id", "username", "email", "password", "first_name", "last_name"]

    def validate_password(self, value):
        # Uses Django’s built-in validators (length/complexity if configured)
        validate_password(value)
        return value

    def create(self, validated_data):
        # Properly hash the password
        password = validated_data.pop("password")
        user = User(**validated_data)
        user.set_password(password)
        user.save()
        return user


class MeSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ["id", "username", "email", "first_name", "last_name", "is_staff"]
        read_only_fields = fields

If you want to allow profile edits on /users/me/ later, make read_only_fields empty and implement patch() in the view.

2) api/views.py
# api/views.py
from rest_framework.views import APIView                                                                           from rest_framework.response import Response                                                                              from rest_framework import permissions, status                                                                    from .serializers import RegisterSerializer, MeSerializer
          class RegisterView(APIView):
    """POST /api/auth/register/"""
    permission_classes = [permissions.AllowAny]

    def post(self, request):
        serializer = RegisterSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()  # serializer handles set_password
        return Response(MeSerializer(user).data, status=status.HTTP_201_CREATED)


class MeView(APIView):
    """GET /api/users/me/"""
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request):
        return Response(MeSerializer(request.user).data, status=status.HTTP_200_OK)

3) api/urls.py
from django.urls import path
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from .views import RegisterView, MeView

urlpatterns = [
    # Auth
    path("auth/register/", RegisterView.as_view(), name="register"),
    path("auth/login/", TokenObtainPairView.as_view(), name="jwt-login"),
    path("auth/refresh/", TokenRefreshView.as_view(), name="jwt-refresh"),

    # User
    path("users/me/", MeView.as_view(), name="me"),
]


4) Sample requests (ready to test)
Register
POST /api/auth/register/
Content-Type: application/json

{
  "username": "alice",
  "email": "alice@example.com",
  "password": "StrongPass!234",
  "first_name": "Alice",
  "last_name": "W"
}

201 Created
{
  "id": 1,
  "username": "alice",
  "email": "alice@example.com",
  "first_name": "Alice",
  "last_name": "W"
}

Login (JWT)
POST /api/auth/login/
Content-Type: application/json

{ "username": "alice", "password": "StrongPass!234" }

200 OK
{
  "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1...",
  "access":  "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1..."
}

Current user
GET /api/users/me/
Authorization: Bearer <access-token>

200 OK
{
  "id": 1,
  "username": "alice",
  "email": "alice@example.com",
  "first_name": "Alice",
  "last_name": "W",
  "is_staff": false
}
