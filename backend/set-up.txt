1. Setup Django & DRF
- pip install django djangorestframework
- django-admin startproject backend
- cd backend
- python manage.py startapp api

Add to settings.py:
INSTALLED_APPS = [
    ...
    'rest_framework',
    'api ',
]


2. Create a Model
myapp/models.py
from django.db import models

class costumer(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)
    age = models.IntegerField()

    def __str__(self):
        return self.name

Run:
python manage.py makemigrations
python manage.py migrate


3. Make a Serializer
myapp/serializers.py
from rest_framework import serializers
from .models import costumer

class costumerSerializer(serializers.ModelSerializer):
    class Meta:
        model = costumer
        fields = '__all__'

-------------------------------------------------------------------------------------

1) CRUD with ModelViewSet (fastest)
myapp/views.py
from rest_framework import viewsets
from .models import costumer
from .serializers import costumerSerializer

class costumerViewSet(viewsets.ModelViewSet):
    queryset = costumer.objects.all()
    serializer_class = costumerSerializer

myapp/urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import costumerViewSet

router = DefaultRouter()
router.register(r"costumers", costumerViewSet)

urlpatterns = [
    path("", include(router.urls)),
]

Endpoints
GET /costumers/ (list)


POST /costumers/ (create)


GET /costumers/{id}/ (retrieve)


PUT/PATCH /costumers/{id}/ (update/partial)


DELETE /costumers/{id}/ (delete)



2) CRUD with APIView (manual but flexible)
myapp/views.py
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.shortcuts import get_object_or_404
from .models import costumer
from .serializers import costumerSerializer

class costumerListCreateAPI(APIView):
    def get(self, request):
        qs = costumer.objects.all()
        return Response(costumerSerializer(qs, many=True).data)

    def post(self, request):
        ser = costumerSerializer(data=request.data)
        if ser.is_valid():
            ser.save()
            return Response(ser.data, status=status.HTTP_201_CREATED)
        return Response(ser.errors, status=status.HTTP_400_BAD_REQUEST)

class costumerDetailAPI(APIView):
    def get(self, request, pk):
        obj = get_object_or_404(costumer, pk=pk)
        return Response(costumerSerializer(obj).data)

    def put(self, request, pk):
        obj = get_object_or_404(costumer, pk=pk)
        ser = costumerSerializer(obj, data=request.data)
        if ser.is_valid():
            ser.save()
            return Response(ser.data)
        return Response(ser.errors, status=status.HTTP_400_BAD_REQUEST)

    def patch(self, request, pk):
        obj = get_object_or_404(costumer, pk=pk)
        ser = costumerSerializer(obj, data=request.data, partial=True)
        if ser.is_valid():
            ser.save()
            return Response(ser.data)
        return Response(ser.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        obj = get_object_or_404(costumer, pk=pk)
        obj.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

myapp/urls.py
from django.urls import path
from .views import costumerListCreateAPI, costumerDetailAPI

urlpatterns = [
    path("costumers/", costumerListCreateAPI.as_view()),
    path("costumers/<int:pk>/", costumerDetailAPI.as_view()),
]


3) CRUD with @api_view (function-based views)
myapp/views.py
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from django.shortcuts import get_object_or_404
from .models import costumer
from .serializers import costumerSerializer

@api_view(["GET", "POST"])
def costumer_list_create(request):
    if request.method == "GET":
        qs = costumer.objects.all()
        return Response(costumerSerializer(qs, many=True).data)

    # POST
    ser = costumerSerializer(data=request.data)
    if ser.is_valid():
        ser.save()
        return Response(ser.data, status=status.HTTP_201_CREATED)
    return Response(ser.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(["GET", "PUT", "PATCH", "DELETE"])
def costumer_detail(request, pk):
    obj = get_object_or_404(costumer, pk=pk)

    if request.method == "GET":
        return Response(costumerSerializer(obj).data)

    if request.method == "PUT":
        ser = costumerSerializer(obj, data=request.data)
    elif request.method == "PATCH":
        ser = costumerSerializer(obj, data=request.data, partial=True)
    elif request.method == "DELETE":
        obj.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

    if ser.is_valid():
        ser.save()
        return Response(ser.data)
    return Response(ser.errors, status=status.HTTP_400_BAD_REQUEST)

myapp/urls.py
from django.urls import path
from .views import costumer_list_create, costumer_detail

urlpatterns = [
    path("costumers/", costumer_list_create),
    path("costumers/<int:pk>/", costumer_detail),
]

